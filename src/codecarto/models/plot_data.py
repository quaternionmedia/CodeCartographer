from numpy import size
from pydantic import BaseModel
from typing import Callable, Dict


class RawData:
    def __init__(self, name: str, raw: str):
        self.name = name
        self.raw = raw


class FileGraphData(BaseModel):
    name: str = ""
    size: int = 0
    raw: str = ""
    layout: str = "Spring"


class LayoutType(dict):
    name: str
    func: Callable
    params: list[str]


class PlotOptions(BaseModel):
    palette_id: str = "0"
    layout: str = "Spring"
    type: str = "d3"


class Palette(BaseModel):
    id: str
    bases: Dict[str, str]
    labels: Dict[str, str]
    alphas: Dict[str, float]
    sizes: Dict[str, int]
    shapes: Dict[str, str]
    colors: Dict[str, str]


DefaultPalette = Palette(
    id="0",
    bases={
        "Unknown": "unknown",
        "Async": "async",
        "AsyncFor": "async.for",
        "AsyncWith": "async.with",
        "AsyncFunctionDef": "async.function",
        "Control": "control",
        "Conditional": "control.cond",
        "Break": "control.break",
        "Continue": "control.continue",
        "ExceptHandler": "control",
        "For": "control.loop.for",
        "If": "control.cond.if",
        "Try": "control.try",
        "While": "control.loop.while",
        "With": "control.loop.with",
        "Definitions": "def",
        "ClassDef": "def.class",
        "FunctionDef": "def.function",
        "Global": "def.global",
        "Nonlocal": "def.nonlocal",
        "Return": "def",
        "Yield": "def",
        "YieldFrom": "def",
        "Argument": "deprecated",
        "Body": "deprecated",
        "Bytes": "deprecated",
        "Ellipsis": "deprecated",
        "ExtSlice": "deprecated",
        "Float": "deprecated",
        "Index": "deprecated",
        "Int": "deprecated",
        "Loop": "deprecated",
        "Method": "deprecated",
        "NameConstant": "deprecated",
        "Num": "deprecated",
        "Str": "deprecated",
        "Expressions": "expr",
        "Attribute": "expr",
        "BinOp": "expr",
        "BoolOp": "expr",
        "Call": "expr",
        "Compare": "expr",
        "Expr": "expr",
        "IfExp": "expr",
        "UnaryOp": "expr",
        "Slice": "expr.subscript",
        "Subscript": "expr.subscript",
        "DictComp": "expr.comp",
        "GeneratorExp": "expr.comp",
        "ListComp": "expr.comp",
        "SetComp": "expr.comp",
        "Literals": "literals",
        "Constant": "literals.constant",
        "Dict": "literals.dict",
        "List": "literals",
        "Set": "literals",
        "Tuple": "literals",
        "Match": "match",
        "MatchAs": "match",
        "MatchClass": "match",
        "MatchMap": "match",
        "MatchOr": "match",
        "MatchSequence": "match",
        "MatchSingleton": "match",
        "MatchStar": "match",
        "MatchValue": "match",
        "Module": "module",
        "FunctionType": "module",
        "Interactive": "module",
        "Statements": "statements",
        "AnnAssign": "statements",
        "Assert": "statements",
        "Assign": "statements",
        "Delete": "statements",
        "Pass": "statements",
        "Raise": "statements",
        "Import": "statements.import",
        "ImportFrom": "statements.importfrom",
        "Variable": "variables",
        "Name": "variables",
    },
    labels={
        "unknown": "u",
        "async": "@",
        "async.for": "@for",
        "async.with": "@wi",
        "async.function": "@Fn",
        "control": "c",
        "control.cond": "cc",
        "control.cond.loop": "ccl",
        "control.break": "brk",
        "control.continue": "cont",
        "control.loop.for": "for",
        "control.cond.if": "if",
        "control.try": "try",
        "control.loop.while": "wh",
        "control.loop.with": "wi",
        "def": "d",
        "def.class": "Cl",
        "def.function": "Fn",
        "def.global": "gl",
        "def.nonlocal": "nl",
        "deprecated": "x",
        "expr": "e",
        "expr.subscript": "sbscpt",
        "expr.comp": "comp",
        "literals": "l",
        "literals.constant": "const",
        "literals.dict": "dict",
        "match": "mat",
        "module": "Mod",
        "statements": "s",
        "statements.import": "I",
        "statements.importfrom": "IF",
        "variables": "var",
    },
    alphas={
        "unknown": 0.3,
        "async": 0.3,
        "async.for": 0.3,
        "async.with": 0.3,
        "async.function": 0.3,
        "control": 0.3,
        "control.cond": 0.3,
        "control.cond.loop": 0.3,
        "control.break": 0.3,
        "control.continue": 0.3,
        "control.loop.for": 0.3,
        "control.cond.if": 0.3,
        "control.try": 0.3,
        "control.loop.while": 0.3,
        "control.loop.with": 0.3,
        "def": 0.3,
        "def.class": 0.3,
        "def.function": 0.3,
        "def.global": 0.3,
        "def.nonlocal": 0.3,
        "deprecated": 0.3,
        "expr": 0.5,
        "expr.subscript": 0.5,
        "expr.comp": 0.5,
        "literals": 0.3,
        "literals.constant": 0.3,
        "literals.dict": 0.3,
        "match": 0.3,
        "module": 0.5,
        "statements": 0.3,
        "statements.import": 0.3,
        "statements.importfrom": 0.3,
        "variables": 0.5,
    },
    sizes={
        "unknown": 400,
        "async": 400,
        "async.for": 400,
        "async.with": 400,
        "async.function": 800,
        "control": 400,
        "control.cond": 400,
        "control.cond.loop": 400,
        "control.break": 400,
        "control.continue": 400,
        "control.loop.for": 400,
        "control.cond.if": 400,
        "control.try": 400,
        "control.loop.while": 400,
        "control.loop.with": 400,
        "def": 400,
        "def.class": 1000,
        "def.function": 800,
        "def.global": 600,
        "def.nonlocal": 400,
        "deprecated": 400,
        "expr": 400,
        "expr.subscript": 400,
        "expr.comp": 400,
        "literals": 400,
        "literals.constant": 600,
        "literals.dict": 400,
        "match": 400,
        "module": 1000,
        "statements": 400,
        "statements.import": 800,
        "statements.importfrom": 800,
        "variables": 400,
    },
    shapes={
        "unknown": "o",
        "async": "^",
        "async.for": "^",
        "async.with": "^",
        "async.function": "^",
        "control": "s",
        "control.cond": "s",
        "control.cond.loop": "s",
        "control.break": "s",
        "control.continue": "s",
        "control.loop.for": "s",
        "control.cond.if": "s",
        "control.try": "s",
        "control.loop.while": "s",
        "control.loop.with": "s",
        "def": "H",
        "def.class": "H",
        "def.function": "H",
        "def.global": "H",
        "def.nonlocal": "H",
        "deprecated": "x",
        "expr": "<",
        "expr.subscript": "<",
        "expr.comp": "<",
        "literals": ">",
        "literals.constant": ">",
        "literals.dict": ">",
        "match": "D",
        "module": "s",
        "statements": "d",
        "statements.import": "d",
        "statements.importfrom": "d",
        "variables": "o",
    },
    colors={
        "unknown": "gray",
        "async": "pink",
        "async.for": "pink",
        "async.with": "pink",
        "async.function": "pink",
        "control": "orange",
        "control.cond": "green",
        "control.cond.loop": "maroon",
        "control.break": "violet",
        "control.continue": "violet",
        "control.loop.for": "maroon",
        "control.cond.if": "green",
        "control.try": "green",
        "control.loop.while": "maroon",
        "control.loop.with": "maroon",
        "def": "purple",
        "def.class": "purple",
        "def.function": "purple",
        "def.global": "purple",
        "def.nonlocal": "purple",
        "deprecated": "red",
        "expr": "khaki",
        "expr.subscript": "khaki",
        "expr.comp": "khaki",
        "literals": "gold",
        "literals.constant": "gold",
        "literals.dict": "gold",
        "match": "salmon",
        "module": "red",
        "statements": "blue",
        "statements.import": "lightblue",
        "statements.importfrom": "darkblue",
        "variables": "skyblue",
    },
)
